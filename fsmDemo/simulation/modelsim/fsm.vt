// Copyright (C) 1991-2015 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus II License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench template that is freely editable to  
// suit user's needs .Comments are provided in each section to help the user    
// fill out necessary details.                                                  
// *****************************************************************************
// Generated on "11/26/2018 15:18:23"
                                                                                
// Verilog Test Bench template for design : fsm
// 
// Simulation tool : ModelSim-Altera (Verilog)
// 

`timescale 1 ns/ 1 ns
module fsm_vlg_tst();
// constants                                           
// general purpose registers
//reg eachvec;
// test vector input registers
reg A;
reg Clock;
reg Reset;
// wires                                               
wire K1;
wire K2;

// assign statements (if any)                          
fsm i1 (
// port map - connection between master ports and signals/registers   
	.A(A),
	.Clock(Clock),
	.K1(K1),
	.K2(K2),
	.Reset(Reset)
);
initial                                                
begin                                                  
// code that executes only once                        
// insert code here --> begin                          
     A = 0;
     Reset =1;      
     Clock = 0;
     #22 Reset = 0;
     #133 Reset = 1;                                            
// --> end                                             
$display("Running testbench");                       
end   

always #50 Clock = ~Clock;

always @ (posedge Clock)                                                 
// optional sensitivity list                           
// @(event1 or event2 or .... eventn)                  
begin                                                  
// code executes for every event on sensitivity list   
// insert code here --> begin                          
    #30 A = {$random}%2;
    #(3*50+12);                                                   
//@eachvec;                                              
// --> end                                             
end     

initial
	begin #100000 $stop;end
	                                               
endmodule

